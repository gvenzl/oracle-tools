#!/bin/bash
# MIT License
#
# Copyright (c) 2024 Kris Rice, Gerald Venzl
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

sql() {
  # Remote source this script
  #
  # . <(curl -s https://raw.githubusercontent.com/gvenzl/oracle-tools/main/sqlcl/sql)

  # Set global vars
  STAGE_DIR=/var/tmp
  DOWNLOAD_URL="https://download.oracle.com/otn_software/java/sqldeveloper/sqlcl-latest.zip"
  DOWNLOAD_FILE="sqlcl-latest.zip"
  ETAG_FILE="sqlcl.etag"
  # Explicitly empty if no proxy is in use
  CURL_PROXY=""
  
  # If a proxy is configured, use HTTPS over HTTP and pass it on to curl
  if [[ -n "$HTTPS_PROXY" ]]; then
    CURL_PROXY="-x $HTTPS_PROXY"
  elif [[ -n "$HTTP_PROXY" ]]; then
    CURL_PROXY="-x $HTTP_PROXY"
  fi

  # Check whether an internet connection exists
  echo "üîÑ Checking SQLcl version..."

  # Get stored local ETag
  if [[ -e $STAGE_DIR/$ETAG_FILE ]]; then
    CURRENT_ETAG=$(cat $STAGE_DIR/$ETAG_FILE)
  else
    CURRENT_ETAG="none"
  fi

  # Get latest ETag from download
  ETAG=$(curl $CURL_PROXY --connect-timeout 5 -I -s "$DOWNLOAD_URL" | tr -d '\r'  | sed -En 's/^ETag: (.*)/\1/p')

  if [[ -z "$ETAG" ]]; then
    echo "‚ö†Ô∏è  Cannot verify latest SQLcl version."
  fi

  # Download new SQLcl version if ETags don't match
  if [[ "$ETAG" == "$CURRENT_ETAG" ]]; then
    echo "‚úÖ SQLcl is current."
  # If remote ETag is not null, download zip file, otherwise run local install
  elif [[ -n "$ETAG" ]]; then
    echo "‚¨áÔ∏è  Downloading latest SQLcl..."
    if curl -sS $CURL_PROXY --connect-timeout 5 \
            -o $STAGE_DIR/$DOWNLOAD_FILE \
            --header "If-None-Match: ${CURRENT_ETAG}" \
            "$DOWNLOAD_URL"; then

      if [[ -d $STAGE_DIR/sqlcl ]]; then
        echo "üßπ Removing old SQLcl"
        rm -rf $STAGE_DIR/sqlcl
      fi

      echo "üóúÔ∏è  Unzipping latest SQLcl to $STAGE_DIR/sqlcl"
      unzip   -qq -d $STAGE_DIR $STAGE_DIR/$DOWNLOAD_FILE
      rm $STAGE_DIR/$DOWNLOAD_FILE

      echo "$ETAG" > $STAGE_DIR/$ETAG_FILE
    else
      echo "‚ö†Ô∏è  New SQLcl version cannot be downloaded, please check internet connection."
    fi
  fi 

  if [[ ! -f $STAGE_DIR/sqlcl/bin/sql ]]; then
    echo "‚ùå SQLcl could not be installed. Please check your internet connection."
    echo "‚ùå The download URL is '$DOWNLOAD_URL'"
    return 1;
  else
    # Run SQLcl
    echo "üöÄ Launching SQLcl..."
    $STAGE_DIR/sqlcl/bin/sql "$@"
  fi
}
